/** \file
 *  This C header file was generated by $ANTLR version 3.5.3
 *
 *     -  From the grammar source file : src/grammar/rec/Example.g3
 *     -                            On : 2024-09-24 13:08:55
 *     -                for the parser : ExampleParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
ExampleParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pExampleParser, which is returned from a call to ExampleParserNew().
 *
 * The methods in pExampleParser are  as follows:
 *
 *  - 
 ExampleParser_source_return
      pExampleParser->source(pExampleParser)
 *  - 
 ExampleParser_sourceItem_return
      pExampleParser->sourceItem(pExampleParser)
 *  - 
 ExampleParser_funcSignature_return
      pExampleParser->funcSignature(pExampleParser)
 *  - 
 ExampleParser_argDefList_return
      pExampleParser->argDefList(pExampleParser)
 *  - 
 ExampleParser_argDef_return
      pExampleParser->argDef(pExampleParser)
 *  - 
 ExampleParser_statement_return
      pExampleParser->statement(pExampleParser)
 *  - 
 ExampleParser_typeRef_return
      pExampleParser->typeRef(pExampleParser)
 *  - 
 ExampleParser_var_return
      pExampleParser->var(pExampleParser)
 *  - 
 ExampleParser_array_return
      pExampleParser->array(pExampleParser)
 *  - 
 ExampleParser_baseType_return
      pExampleParser->baseType(pExampleParser)
 *  - 
 ExampleParser_builtinType_return
      pExampleParser->builtinType(pExampleParser)
 *  - 
 ExampleParser_customType_return
      pExampleParser->customType(pExampleParser)
 *  - 
 ExampleParser_statementBlock_return
      pExampleParser->statementBlock(pExampleParser)
 *  - 
 ExampleParser_whileStatement_return
      pExampleParser->whileStatement(pExampleParser)
 *  - 
 ExampleParser_doWhileStatement_return
      pExampleParser->doWhileStatement(pExampleParser)
 *  - 
 ExampleParser_exprStatement_return
      pExampleParser->exprStatement(pExampleParser)
 *  - 
 ExampleParser_expr_return
      pExampleParser->expr(pExampleParser)
 *  - 
 ExampleParser_assignmentExpr_return
      pExampleParser->assignmentExpr(pExampleParser)
 *  - 
 ExampleParser_addExpr_return
      pExampleParser->addExpr(pExampleParser)
 *  - 
 ExampleParser_mulExpr_return
      pExampleParser->mulExpr(pExampleParser)
 *  - 
 ExampleParser_unaryExpr_return
      pExampleParser->unaryExpr(pExampleParser)
 *  - 
 ExampleParser_primary_return
      pExampleParser->primary(pExampleParser)
 *  - 
 ExampleParser_funcCall_return
      pExampleParser->funcCall(pExampleParser)
 *  - 
 ExampleParser_exprList_return
      pExampleParser->exprList(pExampleParser)
 *  - 
 ExampleParser_indexing_return
      pExampleParser->indexing(pExampleParser)
 *  - 
 ExampleParser_braces_return
      pExampleParser->braces(pExampleParser)
 *  - 
 ExampleParser_place_return
      pExampleParser->place(pExampleParser)
 *  - 
 ExampleParser_literal_return
      pExampleParser->literal(pExampleParser)
 *  - 
 ExampleParser_binOp_return
      pExampleParser->binOp(pExampleParser)
 *  - 
 ExampleParser_unOp_return
      pExampleParser->unOp(pExampleParser)
 *  - 
 ExampleParser_identifier_return
      pExampleParser->identifier(pExampleParser)
 *  - 
 ExampleParser_str_return
      pExampleParser->str(pExampleParser)
 *  - 
 ExampleParser_rune_return
      pExampleParser->rune(pExampleParser)
 *  - 
 ExampleParser_hex_return
      pExampleParser->hex(pExampleParser)
 *  - 
 ExampleParser_bits_return
      pExampleParser->bits(pExampleParser)
 *  - 
 ExampleParser_dec_return
      pExampleParser->dec(pExampleParser)
 *  - 
 ExampleParser_boolLit_return
      pExampleParser->boolLit(pExampleParser)
 *  - 
 ExampleParser_minus_return
      pExampleParser->minus(pExampleParser)
 *  - 
 ExampleParser_exclMark_return
      pExampleParser->exclMark(pExampleParser)
 *  - 
 ExampleParser_plus_return
      pExampleParser->plus(pExampleParser)
 *  - 
 ExampleParser_mul_return
      pExampleParser->mul(pExampleParser)
 *  - 
 ExampleParser_assign_return
      pExampleParser->assign(pExampleParser)
 *  - 
 ExampleParser_divide_return
      pExampleParser->divide(pExampleParser)
 *  - 
 ExampleParser_eq_return
      pExampleParser->eq(pExampleParser)
 *  - 
 ExampleParser_neq_return
      pExampleParser->neq(pExampleParser)
 *  - 
 ExampleParser_le_return
      pExampleParser->le(pExampleParser)
 *  - 
 ExampleParser_gr_return
      pExampleParser->gr(pExampleParser)
 *  - 
 ExampleParser_leEq_return
      pExampleParser->leEq(pExampleParser)
 *  - 
 ExampleParser_grEq_return
      pExampleParser->grEq(pExampleParser)
 *  - 
 ExampleParser_boolType_return
      pExampleParser->boolType(pExampleParser)
 *  - 
 ExampleParser_byteType_return
      pExampleParser->byteType(pExampleParser)
 *  - 
 ExampleParser_intType_return
      pExampleParser->intType(pExampleParser)
 *  - 
 ExampleParser_uintType_return
      pExampleParser->uintType(pExampleParser)
 *  - 
 ExampleParser_longType_return
      pExampleParser->longType(pExampleParser)
 *  - 
 ExampleParser_ulongType_return
      pExampleParser->ulongType(pExampleParser)
 *  - 
 ExampleParser_charType_return
      pExampleParser->charType(pExampleParser)
 *  - 
 ExampleParser_stringType_return
      pExampleParser->stringType(pExampleParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ExampleParser_H
#define _ExampleParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ExampleParser_Ctx_struct ExampleParser, * pExampleParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct ExampleParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_source_return;



typedef struct ExampleParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_sourceItem_return;



typedef struct ExampleParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_funcSignature_return;



typedef struct ExampleParser_argDefList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_argDefList_return;



typedef struct ExampleParser_argDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_argDef_return;



typedef struct ExampleParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_statement_return;



typedef struct ExampleParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_typeRef_return;



typedef struct ExampleParser_var_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_var_return;



typedef struct ExampleParser_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_array_return;



typedef struct ExampleParser_baseType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_baseType_return;



typedef struct ExampleParser_builtinType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_builtinType_return;



typedef struct ExampleParser_customType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_customType_return;



typedef struct ExampleParser_statementBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_statementBlock_return;



typedef struct ExampleParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_whileStatement_return;



typedef struct ExampleParser_doWhileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_doWhileStatement_return;



typedef struct ExampleParser_exprStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_exprStatement_return;



typedef struct ExampleParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_expr_return;



typedef struct ExampleParser_assignmentExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_assignmentExpr_return;



typedef struct ExampleParser_addExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_addExpr_return;



typedef struct ExampleParser_mulExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_mulExpr_return;



typedef struct ExampleParser_unaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_unaryExpr_return;



typedef struct ExampleParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_primary_return;



typedef struct ExampleParser_funcCall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_funcCall_return;



typedef struct ExampleParser_exprList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_exprList_return;



typedef struct ExampleParser_indexing_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_indexing_return;



typedef struct ExampleParser_braces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_braces_return;



typedef struct ExampleParser_place_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_place_return;



typedef struct ExampleParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_literal_return;



typedef struct ExampleParser_binOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_binOp_return;



typedef struct ExampleParser_unOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_unOp_return;



typedef struct ExampleParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_identifier_return;



typedef struct ExampleParser_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_str_return;



typedef struct ExampleParser_rune_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_rune_return;



typedef struct ExampleParser_hex_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_hex_return;



typedef struct ExampleParser_bits_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_bits_return;



typedef struct ExampleParser_dec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_dec_return;



typedef struct ExampleParser_boolLit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_boolLit_return;



typedef struct ExampleParser_minus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_minus_return;



typedef struct ExampleParser_exclMark_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_exclMark_return;



typedef struct ExampleParser_plus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_plus_return;



typedef struct ExampleParser_mul_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_mul_return;



typedef struct ExampleParser_assign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_assign_return;



typedef struct ExampleParser_divide_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_divide_return;



typedef struct ExampleParser_eq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_eq_return;



typedef struct ExampleParser_neq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_neq_return;



typedef struct ExampleParser_le_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_le_return;



typedef struct ExampleParser_gr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_gr_return;



typedef struct ExampleParser_leEq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_leEq_return;



typedef struct ExampleParser_grEq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_grEq_return;



typedef struct ExampleParser_boolType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_boolType_return;



typedef struct ExampleParser_byteType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_byteType_return;



typedef struct ExampleParser_intType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_intType_return;



typedef struct ExampleParser_uintType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_uintType_return;



typedef struct ExampleParser_longType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_longType_return;



typedef struct ExampleParser_ulongType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_ulongType_return;



typedef struct ExampleParser_charType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_charType_return;



typedef struct ExampleParser_stringType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExampleParser_stringType_return;




/** Context tracking structure for 
ExampleParser

 */
struct ExampleParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     ExampleParser_source_return
     (*source)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_sourceItem_return
     (*sourceItem)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_funcSignature_return
     (*funcSignature)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_argDefList_return
     (*argDefList)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_argDef_return
     (*argDef)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_statement_return
     (*statement)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_typeRef_return
     (*typeRef)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_var_return
     (*var)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_array_return
     (*array)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_baseType_return
     (*baseType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_builtinType_return
     (*builtinType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_customType_return
     (*customType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_statementBlock_return
     (*statementBlock)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_whileStatement_return
     (*whileStatement)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_doWhileStatement_return
     (*doWhileStatement)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_exprStatement_return
     (*exprStatement)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_expr_return
     (*expr)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_assignmentExpr_return
     (*assignmentExpr)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_addExpr_return
     (*addExpr)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_mulExpr_return
     (*mulExpr)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_unaryExpr_return
     (*unaryExpr)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_primary_return
     (*primary)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_funcCall_return
     (*funcCall)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_exprList_return
     (*exprList)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_indexing_return
     (*indexing)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_braces_return
     (*braces)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_place_return
     (*place)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_literal_return
     (*literal)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_binOp_return
     (*binOp)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_unOp_return
     (*unOp)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_identifier_return
     (*identifier)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_str_return
     (*str)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_rune_return
     (*rune)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_hex_return
     (*hex)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_bits_return
     (*bits)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_dec_return
     (*dec)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_boolLit_return
     (*boolLit)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_minus_return
     (*minus)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_exclMark_return
     (*exclMark)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_plus_return
     (*plus)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_mul_return
     (*mul)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_assign_return
     (*assign)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_divide_return
     (*divide)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_eq_return
     (*eq)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_neq_return
     (*neq)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_le_return
     (*le)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_gr_return
     (*gr)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_leEq_return
     (*leEq)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_grEq_return
     (*grEq)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_boolType_return
     (*boolType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_byteType_return
     (*byteType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_intType_return
     (*intType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_uintType_return
     (*uintType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_longType_return
     (*longType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_ulongType_return
     (*ulongType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_charType_return
     (*charType)	(struct ExampleParser_Ctx_struct * ctx);

     ExampleParser_stringType_return
     (*stringType)	(struct ExampleParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct ExampleParser_Ctx_struct * ctx);
    void	    (*free)   (struct ExampleParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pExampleParser ExampleParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pExampleParser ExampleParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define ALPHA      4
#define ARGDEF      5
#define ARGDEF_LIST      6
#define ARRAY      7
#define ARRAY_SIZE      8
#define ASSIGN      9
#define ASSIGN_TOKEN      10
#define BINARY_DIGIT      11
#define BINARY_OP      12
#define BITS      13
#define BITS_TOKEN      14
#define BLOCK      15
#define BOOL      16
#define BOOL_TOKEN      17
#define BOOL_TYPE      18
#define BRACES      19
#define BREAK      20
#define BUILTIN_TYPE      21
#define BYTE_TYPE      22
#define CALL      23
#define CHAR_TOKEN      24
#define CHAR_TYPE      25
#define CUSTOM_TYPE      26
#define DEC      27
#define DEC_TOKEN      28
#define DIGIT      29
#define DIV_TOKEN      30
#define DO_WHILE      31
#define ELSE      32
#define EQ_TOKEN      33
#define EXCL_MARK_TOKEN      34
#define EXPR      35
#define EXPR_LIST      36
#define FALSE      37
#define FUNC_CALL      38
#define FUNC_DEF      39
#define FUNC_SIGNATURE      40
#define GR_EQ_TOKEN      41
#define GR_TOKEN      42
#define HEX      43
#define HEX_DIGIT      44
#define HEX_TOKEN      45
#define IDENTIFIER      46
#define IDENTIFIER_TOKEN      47
#define IF      48
#define INDEXER      49
#define INDEXING      50
#define INIT      51
#define INT_TYPE      52
#define LE_EQ_TOKEN      53
#define LE_TOKEN      54
#define LIST      55
#define LITERAL      56
#define LONG_TYPE      57
#define MINUS      58
#define MINUS_TOKEN      59
#define MUL      60
#define MUL_TOKEN      61
#define NAME      62
#define NEG      63
#define NEQ_TOKEN      64
#define NEWLINE      65
#define NOT      66
#define PLACE      67
#define PLUS      68
#define PLUS_TOKEN      69
#define PRIMARY      70
#define RUNE      71
#define SOURCE      72
#define SOURCE_ITEM      73
#define SPECIAL      74
#define STR      75
#define STRING_TYPE      76
#define STR_TOKEN      77
#define TERM      78
#define TRUE      79
#define TYPE      80
#define TYPEREF      81
#define UINT_TYPE      82
#define ULONG_TYPE      83
#define UNARY_OP      84
#define VAR      85
#define WHILE      86
#define WS      87
#define WSS      88
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ExampleParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
