/** \file
 *  This C header file was generated by $ANTLR version 3.5.3
 *
 *     -  From the grammar source file : src/grammar/rec/Example.g3
 *     -                            On : 2024-09-24 13:08:55
 *     -                 for the lexer : ExampleLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
ExampleLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pExampleLexer, which is returned from a call to ExampleLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pExampleLexer are  as follows:
 *
 *  - 
 void
      pExampleLexer->T__89(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__90(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__91(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__92(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__93(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__94(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__95(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__96(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__97(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__98(pExampleLexer)
 *  - 
 void
      pExampleLexer->T__99(pExampleLexer)
 *  - 
 void
      pExampleLexer->MINUS_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->EXCL_MARK_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->PLUS_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->MUL_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->ASSIGN_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->DIV_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->EQ_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->NEQ_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->LE_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->GR_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->LE_EQ_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->GR_EQ_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->BOOL_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->BYTE_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->INT_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->UINT_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->LONG_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->ULONG_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->CHAR_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->STRING_TYPE(pExampleLexer)
 *  - 
 void
      pExampleLexer->BOOL_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->IDENTIFIER_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->BITS_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->HEX_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->DEC_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->CHAR_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->STR_TOKEN(pExampleLexer)
 *  - 
 void
      pExampleLexer->NEWLINE(pExampleLexer)
 *  - 
 void
      pExampleLexer->WSS(pExampleLexer)
 *  - 
 void
      pExampleLexer->TRUE(pExampleLexer)
 *  - 
 void
      pExampleLexer->FALSE(pExampleLexer)
 *  - 
 void
      pExampleLexer->ALPHA(pExampleLexer)
 *  - 
 void
      pExampleLexer->SPECIAL(pExampleLexer)
 *  - 
 void
      pExampleLexer->DIGIT(pExampleLexer)
 *  - 
 void
      pExampleLexer->BINARY_DIGIT(pExampleLexer)
 *  - 
 void
      pExampleLexer->HEX_DIGIT(pExampleLexer)
 *  - 
 void
      pExampleLexer->WS(pExampleLexer)
 *  - 
 void
      pExampleLexer->Tokens(pExampleLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ExampleLexer_H
#define _ExampleLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ExampleLexer_Ctx_struct ExampleLexer, * pExampleLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
ExampleLexer

 */
struct ExampleLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__89)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__98)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mT__99)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mMINUS_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mEXCL_MARK_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mPLUS_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mMUL_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mASSIGN_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mDIV_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mEQ_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mNEQ_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mLE_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mGR_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mLE_EQ_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mGR_EQ_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mBOOL_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mBYTE_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mINT_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mUINT_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mLONG_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mULONG_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mCHAR_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mSTRING_TYPE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mBOOL_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mBITS_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mHEX_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mDEC_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mCHAR_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mSTR_TOKEN)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mWSS)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mTRUE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mFALSE)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mALPHA)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mSPECIAL)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mDIGIT)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mBINARY_DIGIT)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct ExampleLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct ExampleLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct ExampleLexer_Ctx_struct * ctx);
    void	    (*free)   (struct ExampleLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pExampleLexer ExampleLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pExampleLexer ExampleLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define ALPHA      4
#define ARGDEF      5
#define ARGDEF_LIST      6
#define ARRAY      7
#define ARRAY_SIZE      8
#define ASSIGN      9
#define ASSIGN_TOKEN      10
#define BINARY_DIGIT      11
#define BINARY_OP      12
#define BITS      13
#define BITS_TOKEN      14
#define BLOCK      15
#define BOOL      16
#define BOOL_TOKEN      17
#define BOOL_TYPE      18
#define BRACES      19
#define BREAK      20
#define BUILTIN_TYPE      21
#define BYTE_TYPE      22
#define CALL      23
#define CHAR_TOKEN      24
#define CHAR_TYPE      25
#define CUSTOM_TYPE      26
#define DEC      27
#define DEC_TOKEN      28
#define DIGIT      29
#define DIV_TOKEN      30
#define DO_WHILE      31
#define ELSE      32
#define EQ_TOKEN      33
#define EXCL_MARK_TOKEN      34
#define EXPR      35
#define EXPR_LIST      36
#define FALSE      37
#define FUNC_CALL      38
#define FUNC_DEF      39
#define FUNC_SIGNATURE      40
#define GR_EQ_TOKEN      41
#define GR_TOKEN      42
#define HEX      43
#define HEX_DIGIT      44
#define HEX_TOKEN      45
#define IDENTIFIER      46
#define IDENTIFIER_TOKEN      47
#define IF      48
#define INDEXER      49
#define INDEXING      50
#define INIT      51
#define INT_TYPE      52
#define LE_EQ_TOKEN      53
#define LE_TOKEN      54
#define LIST      55
#define LITERAL      56
#define LONG_TYPE      57
#define MINUS      58
#define MINUS_TOKEN      59
#define MUL      60
#define MUL_TOKEN      61
#define NAME      62
#define NEG      63
#define NEQ_TOKEN      64
#define NEWLINE      65
#define NOT      66
#define PLACE      67
#define PLUS      68
#define PLUS_TOKEN      69
#define PRIMARY      70
#define RUNE      71
#define SOURCE      72
#define SOURCE_ITEM      73
#define SPECIAL      74
#define STR      75
#define STRING_TYPE      76
#define STR_TOKEN      77
#define TERM      78
#define TRUE      79
#define TYPE      80
#define TYPEREF      81
#define UINT_TYPE      82
#define ULONG_TYPE      83
#define UNARY_OP      84
#define VAR      85
#define WHILE      86
#define WS      87
#define WSS      88
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ExampleLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
