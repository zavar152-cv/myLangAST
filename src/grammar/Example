// START:header
grammar Example;

options {
    language=C;
    output=AST;
    ASTLabelType = pANTLR3_BASE_TREE;
} // build trees

tokens {
  VAR;   // variable definition
  FUNC;  // function definition
  ARG;   // formal argument
  SLIST; // statement list
  EQ;
  NEQ;
  MUL;
  PLUS;
  ASSIGN;
  PARENS;
}
// END:header

// START:decl
program
    :   declaration+
    ;

declaration
    :   variable
    |   function
    ;

variable
    :   type id ';' -> ^(VAR type id)
    ;

type:   intT 
    |   chrT
    ;
// END:decl

// START:func
// E.g., int f(int x, char y) { ... }
function
    :   type id
        '(' ( formalParameter (',' formalParameter)* )?  ')'
        block
        -> ^(FUNC type id formalParameter* block)
    ;

formalParameter
    :   type id -> ^(ARG type id)
    ;

// END:func

// START:state
block
    :   lc='{' variable* state* '}'
        -> ^(SLIST[$lc,"SLIST"] variable* state*)
    ;

state: forStat
    | expr ';'!
    | block
    | assignStat ';'!
    | ';'!
    ;

forStat
    :   'for' '(' first=assignStat ';' expr ';' inc=assignStat ')' block
        -> ^('for' $first expr $inc block)
    ;

assignStat
    :   id '=' expr -> ^(ASSIGN id expr)
    ;
// END:state

// START:expr
expr:   condExpr ;

condExpr
    :   aexpr ( ('=='^|'!='^) aexpr )?
    ;

aexpr
    :   mexpr ('+'^ mexpr)*
    ;

mexpr
    :   atom ('*'^ atom)*
    ;

atom:   id
    |   intE
    |   '(' expr ')' -> expr
    ;
// END:expr

id: ID;
intE: INT;

intT: 'int';
chrT: 'char';

// START:tokens
ID  :   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;

INT :   ('0'..'9')+ ;

WS  :   ( ' ' | '\t' | '\r' | '\n' )+ { $channel = HIDDEN; } ;    
// END:tokens
