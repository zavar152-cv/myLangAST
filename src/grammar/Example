grammar Example;

options {
  language=C;
  output=AST;
  ASTLabelType = pANTLR3_BASE_TREE;
}


tokens {
    METHOD;
}

// Sources
source
  : source_item+ ;

source_item
  : func_def
  ;


// Types
type_ref
  : 'bool' | 'byte' | 'int' | 'uint' | 'long' | 'ulong' | 'char' | 'string'
  | identifier
  | 'array' '[' (',')* ']' 'of' type_ref
  ;


// Functions
func_def
  : 'method'^ func_signature (func_body | ';')
  ;

func_signature
  : identifier '('! (arg_def (',' arg_def)* )? ')'! (':' type_ref)?
  ;

arg_def
  : identifier (':' type_ref)?
  ;

func_body
  : ('var' ( (identifier (',' identifier)*)? (':' type_ref)? ';' )* )? statement_block
  ;


// Statement
statement
  : statement_if
  | statement_block
  | statement_while
  | statement_do
  | statement_break
  | statement_expression
  ;

statement_block
  : 'begin'^ statement* 'end' ';'
  ;
  
statement_if
  : 'if'^ expr 'then' statement ('else' statement)?
  ;

statement_while
  : 'while'^ expr 'do' statement
  ;

statement_do
  : 'repeat'^ statement ('while' | 'until') expr ';'
  ;

statement_break
  : 'break'^
  ;

statement_expression
  : expr^
  ;


// Expressions
expr
  : expr_literal
//  | expr_binary
  | expr_unary
  | expr_braces
//  | expr_call
//  | expr_indexer
  | expr_place
  ;

expr_literal
  : bool | str | rune | hex | bits | dec
  ;

expr_braces
  : '('! expr^ ')'!
  ;

expr_place
  : identifier^
  ;

expr_unary
  : ('+' | '-')^ expr
  ;


// Terminal
identifier: IDENTIFIER;

str: STR;
rune: CHAR;
hex: HEX;
bits: BITS;
dec: DEC;
bool: BOOL;


BOOL: (TRUE | FALSE) ;
IDENTIFIER: (ALPHA | SPECIAL) (ALPHA | SPECIAL | DIGIT)* ;
BITS: '0' ('b'|'B') BINARY_DIGIT+ ;
HEX: '0'('x'|'X') HEX_DIGIT+ ;
DEC: DIGIT+ ;
CHAR: '\'' ~('\'') '\'' ;
STR: ('"') ('\\' . | ~('\\'|'"'))* ('"') ;

NEWLINE:'\r'? '\n' { SKIP(); };
WSS: WS+ { SKIP(); };


fragment TRUE: 'true';
fragment FALSE: 'false';
fragment ALPHA: ('a'..'z' | 'A'..'Z');
fragment SPECIAL: ('_');
fragment DIGIT: ('0'..'9');
fragment BINARY_DIGIT: ('0' | '1');
fragment HEX_DIGIT: ('0'..'9' | 'a'..'f' | 'A'..'F');
fragment WS:(' '|'\t') ;
